#!/bin/bash

available_branches=`git branch`
available_branches=(${available_branches//\*/})
current_branch=`git rev-parse --abbrev-ref HEAD`

selected=()
active=0
viewer="tig"

if [ ! -z "$1" ]
then
    viewer="$1"
fi
echo "Using '$viewer' tool for history viewer"

# little helpers for terminal print control and key input
ESC=$( printf "\033")
cursor_blink_on()   { printf "$ESC[?25h"; }
cursor_blink_off()  { printf "$ESC[?25l"; }
cursor_to()         { printf "$ESC[$1;${2:-1}H"; }
print_inactive()    { printf "$2   $1 "; }
print_active()      { printf "$2  $ESC[7m $1 $ESC[27m"; }
get_cursor_row()    { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
key_input()         {
  local key
  IFS= read -rsn1 key 2>/dev/null >&2
  if [[ $key = ""      ]]; then echo enter; fi;
  if [[ $key = $'\x20' ]]; then echo space; fi;
  if [[ $key = $'\x1b' ]]; then
    read -rsn2 key
    if [[ $key = [A ]]; then echo up;    fi;
    if [[ $key = [B ]]; then echo down;  fi;
  fi 
}
toggle_option()    {
  local arr_name=$1
  eval "local arr=(\"\${${arr_name}[@]}\")"
  local option=$2
  if [[ ${arr[option]} == true ]]; then
    arr[option]=
  else
    arr[option]=true
  fi
  eval $arr_name='("${arr[@]}")'
}

for ((i=0; i<${#available_branches[@]}; i++)); do
    if [ "${available_branches[i]}" == "$current_branch" ]; then
        selected+=(true)
        active=$i
    else
        selected+=("")
    fi
    printf "\n"
done

# determine current screen position for overwriting the available_branches
lastrow=`get_cursor_row`
startrow=$(($lastrow - ${#available_branches[@]}))

# ensure cursor and input echoing back on upon a ctrl+c during read -s
trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
cursor_blink_off

while true; do
    # print available_branches by overwriting the last lines
    idx=0
    for option in "${available_branches[@]}"; do
        prefix="[ ]"
        if [[ ${selected[idx]} == true ]]; then
          prefix="[x]"
        fi

        cursor_to $(($startrow + $idx))
        if [ $idx -eq $active ]; then
            print_active "$option" "$prefix"
        else
            print_inactive "$option" "$prefix"
        fi
        ((idx++))
    done

    # user key control
    case `key_input` in
        space)  toggle_option selected $active;;
        enter)  break;;
        up)     ((active--));
                if [ $active -lt 0 ]; then active=$((${#available_branches[@]} - 1)); fi;;
        down)   ((active++));
                if [ $active -ge ${#available_branches[@]} ]; then active=0; fi;;
    esac
done

# cursor position back to normal
cursor_to $lastrow
printf "\n"
cursor_blink_on


selection=()
for ((i=0; i<${#available_branches[@]}; i++)); do
    if [[ ${selected[i]} == true ]]; then
        selection+=("${available_branches[i]}")
    fi    
done

cmd="${viewer} ${selection[*]}"
echo Running \"$cmd\"...
eval $cmd

